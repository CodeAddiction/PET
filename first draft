package com.example.toshiba.transmitter;


import android.Manifest;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;

/**
 * Created by Toshiba on 3/14/2018.
 */

public class GPSTracker extends Service implements LocationListener {

    // to check to see if we can get the current location
    private final Context mContext;
    Boolean isGPSEnable=false;
    Boolean isNetworkEnable=false;

    //variable for location
    Boolean canGetLocation=false;
    Location location;
    Double latitude;
    Double longitude;

    // distance and time to update location constantly
    private static  final long MIN_DISTANCE_FORUPDATES=10;
    private static  final long MIN_TIME_BETWEENUPDATES=1000 *60 * 1;
    protected LocationManager locationManager;

    public GPSTracker(Context context){
        this.mContext=context;
        getLocation();
    }
    public Location getLocation() {

        try{
            locationManager=(LocationManager) mContext.getSystemService(LOCATION_SERVICE);
           isGPSEnable= locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
           isNetworkEnable=locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

           if(!isGPSEnable && !isNetworkEnable){

           }
           else{
               this.canGetLocation=true;
               if(isNetworkEnable){
                   if(ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)!=
                           PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission
                           (this, Manifest.permission.ACCESS_COARSE_LOCATION)!=PackageManager.PERMISSION_GRANTED){
                      return null;
                   }
                   locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,MIN_TIME_BETWEENUPDATES,MIN_DISTANCE_FORUPDATES, this);

                   if(locationManager !=null){
                       location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);

                       if (location!=null){
                           latitude=location.getLatitude();
                           longitude=location.getLongitude();
                       }
                   }
               }

               if(isGPSEnable){
                   if(location==null){
                       locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,MIN_TIME_BETWEENUPDATES,MIN_DISTANCE_FORUPDATES,this);
                       if(locationManager !=null){
                           location=locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);

                           if (location!=null){
                               latitude=location.getLatitude();
                               longitude=location.getLongitude();
                           }
                       }
                   }
               }
           }

        }catch(Exception e){
            e.printStackTrace();
        }
           return location;
    }
    @Nullable
    @Override
    public IBinder onBind(Intent intent) {


        return null;
    }

    @Override
    public void onLocationChanged(Location location) {

    }

    @Override
    public void onStatusChanged(String s, int i, Bundle bundle) {

    }

    @Override
    public void onProviderEnabled(String s) {

    }

    @Override
    public void onProviderDisabled(String s) {

    }
}
